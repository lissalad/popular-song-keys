<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Popular Song Keys</title>
  </head>
  <body>
    <svg id="svg" width="500" height="500"></svg>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script>
      d3.csv("/songs.csv").then((data) => {
        // X scale
        const xScale = d3
          .scaleBand()
          .range([0, 2 * Math.PI]) // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle
          .align(0) // This does nothing ?
          .domain(
            data.map(function (d) {
              return d.key;
            })
          ); // The domain of the X axis is the list of states.
        // Y scale
        const yScale = d3
          .scaleRadial()
          .range([30, 200]) // Domain will be define later.
          .domain([0, 10000]); // Domain of Y is from 0 to the max seen in the data

        // Add bars
        svg
          .append("g")
          .selectAll("path")
          .data(data)
          .enter()
          .append("path")
          .attr("fill", "#69b3a2")
          .attr(
            "d",
            d3
              .arc() // imagine your doing a part of a donut plot
              .innerRadius(30)
              .outerRadius(function (d) {
                return y(d["Value"]);
              })
              .startAngle(function (d) {
                return x(d.key);
              })
              .endAngle(function (d) {
                return x(d.key) + x.bandwidth();
              })
              .padAngle(0.01)
              .padRadius(30)
          );
      });
    </script>
  </body>
</html>

equally divided circle parts
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Popular Song Keys</title>
  </head>
  <body>
    <svg id="svg" width="500" height="500"></svg>
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <script>
      d3.csv("/sample.csv").then((data) => {
        const width = 600;
        const height = 600;
        const margin = 40;
        const pieGen = d3.pie();
        const arcData = pieGen(data.map(() => 1));
        const barHeight = data.map((d) => d.value);

        // Make a scale to set the color
        const colorScale = d3
          .scaleSequential()
          .domain([0, 12])
          .interpolator(d3.interpolateRainbow);

        const arcGen = d3
          .arc() // Make an arc generator
          .innerRadius(40) // Set the inner radius
          .outerRadius(200) // Set the outer radius
          .padAngle(0.01); // Set the gap between arcs

        // Select the SVG
        const svg = d3.select("#svg");

        // Append a group (<g>) to hold the arcs
        const pieGroup = svg
          .append("g")
          // position the group in the center
          .attr("transform", `translate(${width / 2}, ${height / 2})`);

        const piePath = pieGroup
          .selectAll("path") // Select all paths
          .data(arcData) // Use the arc data
          .enter()
          .append("path") // Make a path for each arc segment
          .attr("d", arcGen) // Draw the arc segement with the generator
          .attr("fill", (d, i) => colorScale(i)); // Use the color scale
      });
    </script>
  </body>
</html>

# equal but with my song keys
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Popular Song Keys</title>
  </head>
  <body>
    <svg id="svg" width="500" height="500"></svg>
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <script>
      d3.csv("/songs.csv").then((data) => {
        const width = 600;
        const height = 600;
        const margin = 40;
        const pieGen = d3.pie();
        const arcData = pieGen(data.map(() => d.count));
        // const barHeight = data.map((d) => d.count);

        // Make a scale to set the color
        const colorScale = d3
          .scaleSequential()
          .domain([0, 12])
          .interpolator(d3.interpolateRainbow);

        const arcGen = d3
          .arc() // Make an arc generator
          .innerRadius(40) // Set the inner radius
          .outerRadius(200) // Set the outer radius
          .padAngle(0.01); // Set the gap between arcs

        // Select the SVG
        const svg = d3.select("#svg");

        // Append a group (<g>) to hold the arcs
        const pieGroup = svg
          .append("g")
          // position the group in the center
          .attr("transform", `translate(${width / 2}, ${height / 2})`);

        const piePath = pieGroup
          .selectAll("path") // Select all paths
          .data(arcData) // Use the arc data
          .enter()
          .append("path") // Make a path for each arc segment
          .attr("d", arcGen) // Draw the arc segement with the generator
          .attr("fill", (d, i) => colorScale(i)); // Use the color scale
      });
    </script>
  </body>
</html>